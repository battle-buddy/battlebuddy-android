// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to Ballistics Engine RS
class BallisticsEngine {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BallisticsEngine(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BallisticsEngine.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Creates a new `Ammo` instance
  ffi.Pointer<Ammo> create_ammo(
    double damage,
    double armor_damage,
    double penetration,
    double frag_chance,
  ) {
    return _create_ammo(
      damage,
      armor_damage,
      penetration,
      frag_chance,
    );
  }

  late final _create_ammoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Ammo> Function(
              ffi.Double, ffi.Double, ffi.Double, ffi.Double)>>('create_ammo');
  late final _create_ammo = _create_ammoPtr
      .asFunction<ffi.Pointer<Ammo> Function(double, double, double, double)>();

  /// Creates a new `Armor` instance
  ffi.Pointer<Armor> create_armor(
    int class_,
    double durability,
    double durability_max,
    double destructibility,
    double blunt_throughput,
  ) {
    return _create_armor(
      class_,
      durability,
      durability_max,
      destructibility,
      blunt_throughput,
    );
  }

  late final _create_armorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Armor> Function(ffi.Int, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('create_armor');
  late final _create_armor = _create_armorPtr.asFunction<
      ffi.Pointer<Armor> Function(int, double, double, double, double)>();

  /// Creates a new `PersonHealth` instance
  ffi.Pointer<PersonHealth> create_person_health(
    double head,
    double thorax,
    double stomach,
    double arm_left,
    double arm_right,
    double leg_left,
    double leg_right,
  ) {
    return _create_person_health(
      head,
      thorax,
      stomach,
      arm_left,
      arm_right,
      leg_left,
      leg_right,
    );
  }

  late final _create_person_healthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PersonHealth> Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('create_person_health');
  late final _create_person_health = _create_person_healthPtr.asFunction<
      ffi.Pointer<PersonHealth> Function(
          double, double, double, double, double, double, double)>();

  /// Destroys and frees the memory of a `PersonHealth` instance
  void destroy_person_health(
    ffi.Pointer<PersonHealth> health,
  ) {
    return _destroy_person_health(
      health,
    );
  }

  late final _destroy_person_healthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PersonHealth>)>>(
          'destroy_person_health');
  late final _destroy_person_health = _destroy_person_healthPtr
      .asFunction<void Function(ffi.Pointer<PersonHealth>)>();

  /// Returns the current health status of a `HealthCalculator` instance
  ffi.Pointer<PersonHealth> healh_get_person_health(
    ffi.Pointer<HealthCalculator> calculator,
  ) {
    return _healh_get_person_health(
      calculator,
    );
  }

  late final _healh_get_person_healthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PersonHealth> Function(
              ffi.Pointer<HealthCalculator>)>>('healh_get_person_health');
  late final _healh_get_person_health = _healh_get_person_healthPtr.asFunction<
      ffi.Pointer<PersonHealth> Function(ffi.Pointer<HealthCalculator>)>();

  /// Creates a new `HealthCalculator` instance
  ffi.Pointer<HealthCalculator> health_create_calc(
    ffi.Pointer<PersonHealth> person,
    ffi.Pointer<Ammo> ammo,
  ) {
    return _health_create_calc(
      person,
      ammo,
    );
  }

  late final _health_create_calcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<HealthCalculator> Function(ffi.Pointer<PersonHealth>,
              ffi.Pointer<Ammo>)>>('health_create_calc');
  late final _health_create_calc = _health_create_calcPtr.asFunction<
      ffi.Pointer<HealthCalculator> Function(
          ffi.Pointer<PersonHealth>, ffi.Pointer<Ammo>)>();

  /// Destroys and frees the memory of a `HealthCalculator` instance
  void health_destroy_calc(
    ffi.Pointer<HealthCalculator> calculator,
  ) {
    return _health_destroy_calc(
      calculator,
    );
  }

  late final _health_destroy_calcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HealthCalculator>)>>(
      'health_destroy_calc');
  late final _health_destroy_calc = _health_destroy_calcPtr
      .asFunction<void Function(ffi.Pointer<HealthCalculator>)>();

  /// Returns the alive status of a `HealthCalculator` instance
  int health_get_person_alive(
    ffi.Pointer<HealthCalculator> calculator,
  ) {
    return _health_get_person_alive(
      calculator,
    );
  }

  late final _health_get_person_alivePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<HealthCalculator>)>>(
      'health_get_person_alive');
  late final _health_get_person_alive = _health_get_person_alivePtr
      .asFunction<int Function(ffi.Pointer<HealthCalculator>)>();

  /// Processes the impact of ammo on a body zone within a `HealthCalculator` instance
  ffi.Pointer<HealthCalculator> health_impact_on_zone(
    ffi.Pointer<HealthCalculator> calculator,
    int zone,
  ) {
    return _health_impact_on_zone(
      calculator,
      zone,
    );
  }

  late final _health_impact_on_zonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<HealthCalculator> Function(ffi.Pointer<HealthCalculator>,
              ffi.UnsignedInt)>>('health_impact_on_zone');
  late final _health_impact_on_zone = _health_impact_on_zonePtr.asFunction<
      ffi.Pointer<HealthCalculator> Function(
          ffi.Pointer<HealthCalculator>, int)>();

  /// Resets the calculation of a `HealthCalculator` instance
  ffi.Pointer<HealthCalculator> health_reset_calc(
    ffi.Pointer<HealthCalculator> calculator,
  ) {
    return _health_reset_calc(
      calculator,
    );
  }

  late final _health_reset_calcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<HealthCalculator> Function(
              ffi.Pointer<HealthCalculator>)>>('health_reset_calc');
  late final _health_reset_calc = _health_reset_calcPtr.asFunction<
      ffi.Pointer<HealthCalculator> Function(ffi.Pointer<HealthCalculator>)>();

  /// Sets new ammo to a existing `HealthCalculator` instance
  ffi.Pointer<HealthCalculator> health_set_ammo(
    ffi.Pointer<HealthCalculator> calculator,
    ffi.Pointer<Ammo> ammo,
  ) {
    return _health_set_ammo(
      calculator,
      ammo,
    );
  }

  late final _health_set_ammoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<HealthCalculator> Function(ffi.Pointer<HealthCalculator>,
              ffi.Pointer<Ammo>)>>('health_set_ammo');
  late final _health_set_ammo = _health_set_ammoPtr.asFunction<
      ffi.Pointer<HealthCalculator> Function(
          ffi.Pointer<HealthCalculator>, ffi.Pointer<Ammo>)>();

  /// Creates a new `PenetrationCalculator` instance
  ffi.Pointer<PenetrationCalculator> penetration_create_calc(
    ffi.Pointer<Armor> armor,
    ffi.Pointer<Ammo> ammo,
  ) {
    return _penetration_create_calc(
      armor,
      ammo,
    );
  }

  late final _penetration_create_calcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PenetrationCalculator> Function(ffi.Pointer<Armor>,
              ffi.Pointer<Ammo>)>>('penetration_create_calc');
  late final _penetration_create_calc = _penetration_create_calcPtr.asFunction<
      ffi.Pointer<PenetrationCalculator> Function(
          ffi.Pointer<Armor>, ffi.Pointer<Ammo>)>();

  /// Destroys and frees the memory of a `PenetrationCalculator` instance
  void penetration_destroy_calc(
    ffi.Pointer<PenetrationCalculator> calculator,
  ) {
    return _penetration_destroy_calc(
      calculator,
    );
  }

  late final _penetration_destroy_calcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PenetrationCalculator>)>>('penetration_destroy_calc');
  late final _penetration_destroy_calc = _penetration_destroy_calcPtr
      .asFunction<void Function(ffi.Pointer<PenetrationCalculator>)>();

  /// Returns the current penetration chance of a `PenetrationCalculator` instance
  double penetration_get_chance(
    ffi.Pointer<PenetrationCalculator> calculator,
  ) {
    return _penetration_get_chance(
      calculator,
    );
  }

  late final _penetration_get_chancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<PenetrationCalculator>)>>('penetration_get_chance');
  late final _penetration_get_chance = _penetration_get_chancePtr
      .asFunction<double Function(ffi.Pointer<PenetrationCalculator>)>();

  /// Returns the current armor durability of a `PenetrationCalculator` instance
  double penetration_get_durability(
    ffi.Pointer<PenetrationCalculator> calculator,
  ) {
    return _penetration_get_durability(
      calculator,
    );
  }

  late final _penetration_get_durabilityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<PenetrationCalculator>)>>(
      'penetration_get_durability');
  late final _penetration_get_durability = _penetration_get_durabilityPtr
      .asFunction<double Function(ffi.Pointer<PenetrationCalculator>)>();

  /// Returns the maximum armor durability of a `PenetrationCalculator` instance
  double penetration_get_durability_max(
    ffi.Pointer<PenetrationCalculator> calculator,
  ) {
    return _penetration_get_durability_max(
      calculator,
    );
  }

  late final _penetration_get_durability_maxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<PenetrationCalculator>)>>(
      'penetration_get_durability_max');
  late final _penetration_get_durability_max =
      _penetration_get_durability_maxPtr
          .asFunction<double Function(ffi.Pointer<PenetrationCalculator>)>();

  /// Sets new ammo to a existing `PenetrationCalculator` instance
  ffi.Pointer<PenetrationCalculator> penetration_set_ammo(
    ffi.Pointer<PenetrationCalculator> calculator,
    ffi.Pointer<Ammo> ammo,
  ) {
    return _penetration_set_ammo(
      calculator,
      ammo,
    );
  }

  late final _penetration_set_ammoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PenetrationCalculator> Function(
              ffi.Pointer<PenetrationCalculator>,
              ffi.Pointer<Ammo>)>>('penetration_set_ammo');
  late final _penetration_set_ammo = _penetration_set_ammoPtr.asFunction<
      ffi.Pointer<PenetrationCalculator> Function(
          ffi.Pointer<PenetrationCalculator>, ffi.Pointer<Ammo>)>();

  /// Sets new armor to a existing `PenetrationCalculator` instance
  ffi.Pointer<PenetrationCalculator> penetration_set_armor(
    ffi.Pointer<PenetrationCalculator> calculator,
    ffi.Pointer<Armor> armor,
  ) {
    return _penetration_set_armor(
      calculator,
      armor,
    );
  }

  late final _penetration_set_armorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PenetrationCalculator> Function(
              ffi.Pointer<PenetrationCalculator>,
              ffi.Pointer<Armor>)>>('penetration_set_armor');
  late final _penetration_set_armor = _penetration_set_armorPtr.asFunction<
      ffi.Pointer<PenetrationCalculator> Function(
          ffi.Pointer<PenetrationCalculator>, ffi.Pointer<Armor>)>();

  /// Sets armor durability of a `PenetrationCalculator` instance
  ffi.Pointer<PenetrationCalculator> penetration_set_durability(
    ffi.Pointer<PenetrationCalculator> calculator,
    double durability,
  ) {
    return _penetration_set_durability(
      calculator,
      durability,
    );
  }

  late final _penetration_set_durabilityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PenetrationCalculator> Function(
              ffi.Pointer<PenetrationCalculator>,
              ffi.Double)>>('penetration_set_durability');
  late final _penetration_set_durability =
      _penetration_set_durabilityPtr.asFunction<
          ffi.Pointer<PenetrationCalculator> Function(
              ffi.Pointer<PenetrationCalculator>, double)>();
}

final class Ammo extends ffi.Opaque {}

final class Armor extends ffi.Opaque {}

/// Calculator for calculating the impact of ammunition on a body
final class HealthCalculator extends ffi.Opaque {}

/// Calculator for calculating the impact of ammunition on armor
final class PenetrationCalculator extends ffi.Opaque {}

final class PersonHealth extends ffi.Struct {
  @ffi.Double()
  external double head;

  @ffi.Double()
  external double thorax;

  @ffi.Double()
  external double stomach;

  @ffi.Double()
  external double arm_left;

  @ffi.Double()
  external double arm_right;

  @ffi.Double()
  external double leg_left;

  @ffi.Double()
  external double leg_right;
}
